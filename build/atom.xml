<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>RustyCoin</title>
 <link href="http://www.tomshen.me/rustycoin/atom.xml" rel="self"/>
 <link href="http://www.tomshen.me/rustycoin/"/>
 <updated>2014-04-18T21:47:48-04:00</updated>
 <id>http://www.tomshen.me/rustycoin</id>
 <author>
   <name>Tom Shen</name>
   <email></email>
 </author>

 
 <entry>
   <title>15-418 S14 Final Project - Project Checkpoint</title>
   <link href="http://www.tomshen.me/rustycointitle"/>
   <updated>2014-04-18T00:00:00-04:00</updated>
   <id>http://www.tomshen.me/rustycoin./checkpoint</id>
   <content type="html">&lt;h1 id=&quot;toc_0&quot;&gt;Current Progress&lt;/h1&gt;

&lt;p&gt;We have completed a sequential Riecoin proof of work algorithm in Rust. The two main components we have implemented are the Rabin-Miller primality test and wheel factorization. These are the algorithms used by David Andersen in his &lt;a href=&quot;https://github.com/dave-andersen/fastrie&quot;&gt;CPU miner&lt;/a&gt;. We researched other methods of prime verification and generation, but it seems that these are the most efficient for the large integers we are dealing with.&lt;/p&gt;

&lt;p&gt;We began by implementing these algorithms for bignums. However, we realized that a lot of the functionality we need for the miner is not yet implemented in the built-in Rust bignum library. For now, our algorithm assumes that we are dealing with unsigned 64 bit integers. In the next week, we plan to add the needed functionality to the bignum library, so that we can handle the large integers needed for the miner. &lt;/p&gt;

&lt;p&gt;Also, we decided to use an external &lt;a href=&quot;https://github.com/jsanders/rust-bignum&quot;&gt;Rust bignum library&lt;/a&gt;, after poor performance on Rabin-Miller with the built-in library. This improved performance on Rabin-Miller substantially. We will be modifying this library, rather than the built-in bignum library. &lt;/p&gt;

&lt;p&gt;We have also written some unit tests for Rabin-Miller and wheel factorization. We will be using the built-in Rust unit testing. &lt;/p&gt;

&lt;h1 id=&quot;toc_1&quot;&gt;Challenges&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Modifying the bignum library to include what we need for the proof of work algorithm&lt;/li&gt;
&lt;li&gt;Doing arithmetic on very large integers &lt;/li&gt;
&lt;li&gt;Optimizing our proof of work algorithm to beat the CPU implementation by reducing shared information&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;toc_2&quot;&gt;Revised Goals&lt;/h1&gt;

&lt;p&gt;We are definitely on schedule to complete a proof of work algorithm that uses the GPU and improves upon CPU performance. Now that we have written the sequential algorithm, adapting it to use OpenCL should be easily completed in the next couple weeks. We are also confident that we will be able to optimize our algorithm further by parallelizing additional components of the algorithm. Given our revised schedule below, we should have time to implement a complete Riecoin miner. The only thing that may prevent us from achieving these goals is adding to the bignum library, which may be more difficult than expected.&lt;/p&gt;

&lt;h2 id=&quot;toc_3&quot;&gt;Plan to achieve&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Add functionality to bignum library&lt;/li&gt;
&lt;li&gt;Use GPU for parallel prime cluster searching&lt;/li&gt;
&lt;li&gt;Achieve better performance than CPU miner on a GHC machine&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;toc_4&quot;&gt;Hope to achieve&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Parallelize rest of computation (fast prime verification)&lt;/li&gt;
&lt;li&gt;Implement complete Riecoin miner&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;toc_5&quot;&gt;Remaining Schedule&lt;/h1&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Dates&lt;/th&gt;
&lt;th&gt;What We Plan to Do&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Apr. 17 - Apr. 19&lt;/td&gt;
&lt;td&gt;Complete sequential miner, project checkpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr. 20 -  Apr. 23&lt;/td&gt;
&lt;td&gt;Make cluster work with bignums, optimize sequential cluster searching&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr. 24 - Apr. 26&lt;/td&gt;
&lt;td&gt;Add parallelization by moving prime cluster searching computation to GPU&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr. 27 - Apr. 30&lt;/td&gt;
&lt;td&gt;Parallelize prime verification, improve algorithm by looking for further parallelism&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;May 1 - May 3&lt;/td&gt;
&lt;td&gt;Implement complete miner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;May 4 - May 7&lt;/td&gt;
&lt;td&gt;Performance testing, final optimizations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;May 8 - May 9&lt;/td&gt;
&lt;td&gt;Bug fixing, final write up&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;h1 id=&quot;toc_6&quot;&gt;Demo&lt;/h1&gt;

&lt;p&gt;For our final demo, we plan to run our miner across many of the GHC machines. We also plan to show graphs showing the speedup our miner achieved over the CPU miner. &lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>15-418 S14 Final Project - Initial Proposal</title>
   <link href="http://www.tomshen.me/rustycointitle"/>
   <updated>2014-04-02T16:45:54-04:00</updated>
   <id>http://www.tomshen.me/rustycoin./initial-proposal</id>
   <content type="html">&lt;h1 id=&quot;toc_0&quot;&gt;Summary&lt;/h1&gt;

&lt;p&gt;The goal of this project is to create the first open source Riecoin GPU miner. We plan on first implementing a simple serial CPU version, based on David Andersen&amp;#39;s &lt;a href=&quot;https://github.com/dave-andersen/fastrie&quot;&gt;CPU miner&lt;/a&gt;. Then, we plan on parallelizing on a single machine using &lt;a href=&quot;https://github.com/luqmana/rust-opencl&quot;&gt;OpenCL&lt;/a&gt;. Finally, if we have time, we plan on parallelizing across multiple machines.&lt;/p&gt;

&lt;h1 id=&quot;toc_1&quot;&gt;Background&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://riecoin.org&quot;&gt;Riecoin&lt;/a&gt; is a decentralized digital currency, similar to Bitcoin. It differs from Bitcoin in that its proof of work algorithm actually does something useful, rather than just check for sha256 collisions. In particular, the proof of work is based on finding a prime &amp;quot;constellation&amp;quot;: a sextuplet of &amp;quot;consecutive&amp;quot; prime numbers (a sequence of primes of the form &lt;em&gt;n, n+4, n+6, n+10, n+12, n+16&lt;/em&gt;). This prime constellation must be within a certain given range.&lt;/p&gt;

&lt;p&gt;Currently, there exists a parallel CPU miner for Riecoin, as we mentioned in the summary. However, it is a very naive implementation due to not sharing data between threads. Additionally, GPU miners for digital currencies tend to perform much better due to how parallelizable most proofs of work are. However, an open source GPU miner does not currently exist for Riecoin.&lt;/p&gt;

&lt;h1 id=&quot;toc_2&quot;&gt;Challenge&lt;/h1&gt;

&lt;p&gt;The search range for the prime constellations starts at very large numbers: when Riecoin first launched, the target (start) number was 304-bits long, and the difficulty has been increasing ever since then. Additionally, since a new block is available every 2.5 minutes (and thus a new target number and limit), any miner must be able to search for and verify primality of large primes very quickly. This is where parallelization comes in.&lt;/p&gt;

&lt;p&gt;The current state-of-the-art miner uses &lt;a href=&quot;http://en.wikipedia.org/wiki/Wheel_factorization&quot;&gt;wheel factorization&lt;/a&gt; to find primes. Our primary challenge (after successfully implementing this algorithm sequentially) is to find places where we can improve on and parallelize this algorithm.&lt;/p&gt;

&lt;p&gt;Our main parallelization challenges are:
* Find candidate primes with sieving in parallel
  * Using OpenCL rather than CUDA because of better support
  * Sharing information rather than repeating computation (which is what currently is done in the CPU miner)
* Check primality of candidate primes in parallel
  * Finding and implementing a primality test that will benefit from parallelization
* Parallelizing arbitrary-precision integer arithmetic
  * Difficult to correctly implement in parallel
  * Only if we have extra time&lt;/p&gt;

&lt;h1 id=&quot;toc_3&quot;&gt;Resources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt; - safe, concurrent systems programming language&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.khronos.org/opencl/&quot;&gt;OpenCL&lt;/a&gt; - GPU computation framework

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/luqmana/rust-opencl&quot;&gt;rust-opencl&lt;/a&gt; - OpenCL bindings for Rust&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/dave-andersen/fastrie&quot;&gt;fastrie&lt;/a&gt; - Riecoin CPU minter&lt;/li&gt;
&lt;li&gt;David Andersen - both consulting with him in person and his blog posts (e.g. &lt;a href=&quot;http://da-data.blogspot.com/2014/03/fast-prime-cluster-search-or-building.html&quot;&gt;his post on fast prime cluster searching&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;GHC 3000 machines&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;toc_4&quot;&gt;Goals &amp;amp; Deliverables&lt;/h1&gt;

&lt;h2 id=&quot;toc_5&quot;&gt;Plan to achieve&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Implement a sequential Riecoin proof of work algorithm&lt;/li&gt;
&lt;li&gt;Use GPU for parallel prime cluster searching&lt;/li&gt;
&lt;li&gt;Achieve better performance than CPU miner on a GHC machine&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;toc_6&quot;&gt;Hope to achieve&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Parallelize rest of computation (fast prime verification)&lt;/li&gt;
&lt;li&gt;Implement complete Riecoin miner&lt;/li&gt;
&lt;li&gt;Parallelize arbitrary-precision integer arithmetic&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;toc_7&quot;&gt;Platform&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;We plan to implement our miner in Rust, because it runs nearly as fast as C++ while also cleanly including many higher-level language features.&lt;/li&gt;
&lt;li&gt;We will use OpenCL for GPU computation because there exists bindings for it in Rust (as opposed to CUDA).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;toc_8&quot;&gt;Proposed Schedule&lt;/h1&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Week&lt;/th&gt;
&lt;th&gt;What We Plan to Do&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Mar. 30 - Apr. 5&lt;/td&gt;
&lt;td&gt;Choose project idea, write initial proposal&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr. 6 - Apr. 12&lt;/td&gt;
&lt;td&gt;Implement sequential, CPU-based proof of work algorithm&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr. 13 - Apr. 19&lt;/td&gt;
&lt;td&gt;Add parallelization by moving prime cluster searching computation to GPU, project checkpoint&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr. 20 - Apr. 26&lt;/td&gt;
&lt;td&gt;Improve algorithm and look for more areas of parallelization, parallelize prime verification&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apr. 27 - May 3&lt;/td&gt;
&lt;td&gt;Implement complete miner&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;May 4 - May 9&lt;/td&gt;
&lt;td&gt;Performance testing, bug fixing, final write up&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
 </entry>
 

</feed>
